{"version":3,"sources":["../src/area_resolve.js"],"names":["mkdirsSync","dirname","FileSystem","existsSync","Path","mkdirSync","list_code","readFileSync","join","process","cwd","replace","data","JSON","parse","province","province_code","city","city_code","area","area_code","hasCity","data_json","province_json","city_json","area_json","i","code","push","Object","assign","name","p","c","console","log","data_str","stringify","writeFileSync","town_files","readdirSync","town_file","town_content","town_data","town_data_json","key","town_data_json_str"],"mappings":"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","file":"area_resolve.js","sourcesContent":["import FileSystem from 'fs'\nimport Path from 'path'\n\n// 递归创建目录 同步方法\nfunction mkdirsSync(dirname) {\n  if (FileSystem.existsSync(dirname)) {\n    return true\n  } else {\n    if (mkdirsSync(Path.dirname(dirname))) {\n      FileSystem.mkdirSync(dirname)\n      return true\n    }\n  }\n}\n\n\n\n\nlet list_code = FileSystem.readFileSync(Path.join(process.cwd(), 'config/area/list_code.json'), 'UTF-8')\nlist_code = list_code.replace(/^\\uFEFF/, '')\n\n\nlet data = JSON.parse(list_code)\n\nlet province = {}\nlet province_code = 0\nlet city = {}\nlet city_code = 0\nlet area = {}\nlet area_code = 0\nlet hasCity = false\n\nlet data_json = []\n\nlet province_json = {}\nlet city_json = {}\nlet area_json = {}\nlet i = 0\nfor (let code in data) {\n  if (!(code % 1e4)) {     //获取所有的省级行政单位\n    province[code] = data[code]\n    province_code = code\n    if (i !== 0) {\n      data_json.push(Object.assign({}, province_json))\n    }\n    i++\n\n    province_json = {\n      code: code,\n      name: province[code]\n    }\n\n  } else {\n    var p = code - province_code\n    if (province_code && p > 0 && p < 1e4) {    //同省的城市或地区\n      if (!(code % 100)) {\n        hasCity = true\n        city[code] = data[code]\n        // city\n        city_code = code\n\n\n        if (province_json.city) {\n          province_json.city.push(Object.assign({}, city_json))\n        }\n\n        if (!province_json.city) {\n          province_json.city = []\n        }\n\n\n        city_json = {\n          code: code,\n          name: city[code]\n        }\n\n        province_json.city.push(city_json)\n\n\n      } else if (p > 8000) {                 //省直辖县级行政单位\n        city[code] = data[code]\n        // city \n        city_code = code\n\n        if (province_json.city) {\n          province_json.city.push(Object.assign({}, city_json))\n        }\n\n        if (!province_json.city) {\n          province_json.city = []\n        }\n\n        city_json = {\n          code: code,\n          name: city[code]\n        }\n\n        province_json.city.push(city_json)\n\n\n\n      } else if (hasCity) {                  //非直辖市\n        var c = code - city_code\n        if (city_code && c > 0 && c < 100) {     //同个城市的地区\n          area[code] = data[code]\n          // area\n          area_code = code\n\n          if (!city_json.area) {\n            city_json.area = []\n          }\n          city_json.area.push({\n            code: code,\n            name: area[code]\n          })\n\n\n        }\n      } else {\n        area[code] = data[code];            //直辖市\n        // area\n        area_code = code\n\n        if (!city_json.area) {\n          city_json.area = []\n        }\n\n        city_json.area.push({\n          code: code,\n          name: area[code]\n        })\n\n      }\n\n    }\n  }\n}\n\ndata_json.push(Object.assign({}, province_json))\n\nconsole.log(data_json)\n\nlet data_str = JSON.stringify(data_json)\n\nmkdirsSync(Path.join(process.cwd(), 'areas/town'))\n\nFileSystem.writeFileSync(Path.join(process.cwd(), 'areas/list.json'), data_str)\n\nlet town_files = FileSystem.readdirSync(Path.join(process.cwd(), 'config/area/town'))\n\nfor (let town_file of town_files) {\n\n  let town_content = FileSystem.readFileSync(Path.join(process.cwd(), 'config/area/town/' + town_file), 'UTF-8')\n  town_content = town_content.replace(/^\\uFEFF/, '')\n\n  let town_data = JSON.parse(town_content)\n  let town_data_json = []\n  for (let key in town_data) {\n    town_data_json.push({\n      code: key,\n      name: town_data[key]\n    })\n  }\n\n  let town_data_json_str = JSON.stringify(town_data_json)\n  FileSystem.writeFileSync(Path.join(process.cwd(), 'areas/town/' + town_file), town_data_json_str)\n\n\n}\n\n\n\nconsole.log(`finish...`)\n"]}